"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const RnOtpTimer = props => {
  const [minutes, setMinutes] = (0, _react.useState)(props.minutes ? props.minutes : 0);
  const [seconds, setSeconds] = (0, _react.useState)(props.seconds ? props.seconds : 30);
  const [isTimerActive, setIsTimerActive] = (0, _react.useState)(true);
  (0, _react.useEffect)(() => {
    let countDown;

    if (isTimerActive) {
      countDown = setInterval(() => {
        if (!seconds) {
          if (!minutes) {
            clearInterval(countDown);
          } else {
            setMinutes(minutes => minutes - 1);
            setSeconds(59);
          }
        }

        if (seconds > 0) {
          setSeconds(seconds => seconds - 1);
        }
      }, 1000);
    }

    if (!minutes && !seconds) {
      setIsTimerActive(false);
    }

    return () => clearInterval(countDown);
  }, [seconds, minutes, isTimerActive]);

  const handleButton = () => {
    setMinutes(props.minutes ? props.minutes : 0);
    setSeconds(props.seconds ? props.seconds : 30);
    setIsTimerActive(true);
    props.resendButtonAction();
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.otpViewStyle
  }, !minutes && !seconds ? props.resendButtonText ? /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: props.resendButtonStyle,
    onPress: handleButton
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: props.resendButtonTextStyle
  }, props.resendButtonText)) : /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: props.resendButtonStyle,
    onPress: handleButton
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: props.resendButtonTextStyle
  }, "Resend")) : /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: props.timerStyle
  }, minutes < 10 ? `0${minutes}` : minutes, ":", seconds < 10 ? `0${seconds}` : seconds));
};

var _default = RnOtpTimer;
exports.default = _default;
//# sourceMappingURL=index.js.map