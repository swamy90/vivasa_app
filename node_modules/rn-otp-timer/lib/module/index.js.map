{"version":3,"sources":["index.tsx"],"names":["React","useState","useEffect","View","Text","TouchableOpacity","styles","RnOtpTimer","props","minutes","setMinutes","seconds","setSeconds","isTimerActive","setIsTimerActive","countDown","setInterval","clearInterval","handleButton","resendButtonAction","otpViewStyle","resendButtonText","resendButtonStyle","resendButtonTextStyle","timerStyle"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,gBAHF,QAOO,cAPP;AASA,OAAOC,MAAP,MAAmB,UAAnB;;AAiCA,MAAMC,UAAU,GAAIC,KAAD,IAAuC;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CACpCO,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgC,CADI,CAAtC;AAGA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CACpCO,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAtB,GAAgC,EADI,CAAtC;AAGA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAU,IAAV,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAJ;;AACA,QAAIF,aAAJ,EAAmB;AACjBE,MAAAA,SAAS,GAAGC,WAAW,CAAC,MAAM;AAC5B,YAAI,CAACL,OAAL,EAAc;AACZ,cAAI,CAACF,OAAL,EAAc;AACZQ,YAAAA,aAAa,CAACF,SAAD,CAAb;AACD,WAFD,MAEO;AACLL,YAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACAG,YAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF;;AACD,YAAID,OAAO,GAAG,CAAd,EAAiB;AACfC,UAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACD;AACF,OAZsB,EAYpB,IAZoB,CAAvB;AAaD;;AAED,QAAI,CAACF,OAAD,IAAY,CAACE,OAAjB,EAA0B;AACxBG,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;;AACD,WAAO,MAAMG,aAAa,CAACF,SAAD,CAA1B;AACD,GAtBQ,EAsBN,CAACJ,OAAD,EAAUF,OAAV,EAAmBI,aAAnB,CAtBM,CAAT;;AAwBA,QAAMK,YAAY,GAAG,MAAM;AACzBR,IAAAA,UAAU,CAACF,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgC,CAAjC,CAAV;AACAG,IAAAA,UAAU,CAACJ,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAtB,GAAgC,EAAjC,CAAV;AACAG,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAN,IAAAA,KAAK,CAACW,kBAAN;AACD,GALD;;AAOA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACc;AAApB,KACG,CAACX,OAAD,IAAY,CAACE,OAAb,GACCH,KAAK,CAACa,gBAAN,gBACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEb,KAAK,CAACc,iBADf;AAEE,IAAA,OAAO,EAAEJ;AAFX,kBAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,KAAK,CAACe;AAAnB,KACGf,KAAK,CAACa,gBADT,CAJF,CADF,gBAUE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEb,KAAK,CAACc,iBADf;AAEE,IAAA,OAAO,EAAEJ;AAFX,kBAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,KAAK,CAACe;AAAnB,cAJF,CAXH,gBAmBC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,KAAK,CAACgB;AAAnB,KACGf,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OADlC,OAEGE,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OAFlC,CApBJ,CADF;AA4BD,CApED;;AAsEA,eAAeJ,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport styles from './styles';\n\ninterface OtpTimerProps {\n  /**\n   * timer showing minutes\n   */\n  minutes?: number;\n  /**\n   * timer showing seconds\n   */\n  seconds?: number;\n  /**\n   * styling of otp timer\n   */\n  timerStyle?: StyleProp<TextStyle>;\n  /**\n   * text content of resend button\n   */\n  resendButtonText?: string;\n  /**\n   * styling of resend button\n   */\n  resendButtonStyle: StyleProp<ViewStyle>;\n  /**\n   * styling of resend button text\n   */\n  resendButtonTextStyle: StyleProp<TextStyle>;\n  /**\n   * action to perform after clicking resend button\n   */\n  resendButtonAction: () => void;\n}\n\nconst RnOtpTimer = (props: OtpTimerProps): JSX.Element => {\n  const [minutes, setMinutes] = useState<number>(\n    props.minutes ? props.minutes : 0\n  );\n  const [seconds, setSeconds] = useState<number>(\n    props.seconds ? props.seconds : 30\n  );\n  const [isTimerActive, setIsTimerActive] = useState<boolean>(true);\n\n  useEffect(() => {\n    let countDown: NodeJS.Timeout;\n    if (isTimerActive) {\n      countDown = setInterval(() => {\n        if (!seconds) {\n          if (!minutes) {\n            clearInterval(countDown);\n          } else {\n            setMinutes((minutes) => minutes - 1);\n            setSeconds(59);\n          }\n        }\n        if (seconds > 0) {\n          setSeconds((seconds) => seconds - 1);\n        }\n      }, 1000);\n    }\n\n    if (!minutes && !seconds) {\n      setIsTimerActive(false);\n    }\n    return () => clearInterval(countDown);\n  }, [seconds, minutes, isTimerActive]);\n\n  const handleButton = () => {\n    setMinutes(props.minutes ? props.minutes : 0);\n    setSeconds(props.seconds ? props.seconds : 30);\n    setIsTimerActive(true);\n    props.resendButtonAction();\n  };\n\n  return (\n    <View style={styles.otpViewStyle}>\n      {!minutes && !seconds ? (\n        props.resendButtonText ? (\n          <TouchableOpacity\n            style={props.resendButtonStyle}\n            onPress={handleButton}\n          >\n            <Text style={props.resendButtonTextStyle}>\n              {props.resendButtonText}\n            </Text>\n          </TouchableOpacity>\n        ) : (\n          <TouchableOpacity\n            style={props.resendButtonStyle}\n            onPress={handleButton}\n          >\n            <Text style={props.resendButtonTextStyle}>Resend</Text>\n          </TouchableOpacity>\n        )\n      ) : (\n        <Text style={props.timerStyle}>\n          {minutes < 10 ? `0${minutes}` : minutes}:\n          {seconds < 10 ? `0${seconds}` : seconds}\n        </Text>\n      )}\n    </View>\n  );\n};\n\nexport default RnOtpTimer;\n"]}