import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import styles from './styles';

const RnOtpTimer = props => {
  const [minutes, setMinutes] = useState(props.minutes ? props.minutes : 0);
  const [seconds, setSeconds] = useState(props.seconds ? props.seconds : 30);
  const [isTimerActive, setIsTimerActive] = useState(true);
  useEffect(() => {
    let countDown;

    if (isTimerActive) {
      countDown = setInterval(() => {
        if (!seconds) {
          if (!minutes) {
            clearInterval(countDown);
          } else {
            setMinutes(minutes => minutes - 1);
            setSeconds(59);
          }
        }

        if (seconds > 0) {
          setSeconds(seconds => seconds - 1);
        }
      }, 1000);
    }

    if (!minutes && !seconds) {
      setIsTimerActive(false);
    }

    return () => clearInterval(countDown);
  }, [seconds, minutes, isTimerActive]);

  const handleButton = () => {
    setMinutes(props.minutes ? props.minutes : 0);
    setSeconds(props.seconds ? props.seconds : 30);
    setIsTimerActive(true);
    props.resendButtonAction();
  };

  return /*#__PURE__*/React.createElement(View, {
    style: styles.otpViewStyle
  }, !minutes && !seconds ? props.resendButtonText ? /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: props.resendButtonStyle,
    onPress: handleButton
  }, /*#__PURE__*/React.createElement(Text, {
    style: props.resendButtonTextStyle
  }, props.resendButtonText)) : /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: props.resendButtonStyle,
    onPress: handleButton
  }, /*#__PURE__*/React.createElement(Text, {
    style: props.resendButtonTextStyle
  }, "Resend")) : /*#__PURE__*/React.createElement(Text, {
    style: props.timerStyle
  }, minutes < 10 ? `0${minutes}` : minutes, ":", seconds < 10 ? `0${seconds}` : seconds));
};

export default RnOtpTimer;
//# sourceMappingURL=index.js.map