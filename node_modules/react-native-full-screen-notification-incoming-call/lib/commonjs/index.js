"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isAndroid = _reactNative.Platform.OS === 'android';
const RNNotificationIncomingCall = _reactNative.NativeModules.FullScreenNotificationIncomingCall;
let eventEmitter;

if (isAndroid) {
  eventEmitter = new _reactNative.NativeEventEmitter(RNNotificationIncomingCall);
}

var RNNotificationEvent;

(function (RNNotificationEvent) {
  RNNotificationEvent["RNNotificationAnswerAction"] = "RNNotificationAnswerAction";
  RNNotificationEvent["RNNotificationEndCallAction"] = "RNNotificationEndCallAction";
})(RNNotificationEvent || (RNNotificationEvent = {}));

var CallAction;

(function (CallAction) {
  CallAction["ACTION_END_CALL"] = "ACTION_END_CALL";
  CallAction["ACTION_REJECTED_CALL"] = "ACTION_REJECTED_CALL";
  CallAction["ACTION_HIDE_CALL"] = "ACTION_HIDE_CALL";
  CallAction["ACTION_SHOW_INCOMING_CALL"] = "ACTION_SHOW_INCOMING_CALL";
  CallAction["HIDE_NOTIFICATION_INCOMING_CALL"] = "HIDE_NOTIFICATION_INCOMING_CALL";
  CallAction["ACTION_PRESS_ANSWER_CALL"] = "ACTION_PRESS_ANSWER_CALL";
  CallAction["ACTION_PRESS_DECLINE_CALL"] = "ACTION_PRESS_DECLINE_CALL";
  CallAction["ACTION_START_ACTIVITY"] = "ACTION_START_ACTIVITY";
})(CallAction || (CallAction = {}));

class RNNotificationCall {
  constructor() {
    _defineProperty(this, "_notificationEventHandlers", void 0);

    _defineProperty(this, "displayNotification", (uuid, avatar, timeout, foregroundOptions) => {
      if (!isAndroid) return;
      RNNotificationIncomingCall.displayNotification(uuid, avatar, timeout ? timeout : 0, foregroundOptions);
    });

    _defineProperty(this, "hideNotification", () => {
      if (!isAndroid) return;
      RNNotificationIncomingCall.hideNotification();
    });

    _defineProperty(this, "backToApp", () => {
      if (!isAndroid) return;
      RNNotificationIncomingCall.backToApp();
    });

    _defineProperty(this, "addEventListener", (type, handler) => {
      if (!isAndroid) return;
      let listener;

      if (type === 'answer') {
        listener = eventEmitter.addListener(RNNotificationEvent.RNNotificationAnswerAction, eventPayload => {
          handler(eventPayload);
        });
      } else if (type === 'endCall') {
        listener = eventEmitter.addListener(RNNotificationEvent.RNNotificationEndCallAction, eventPayload => {
          handler(eventPayload);
        });
      } else {
        return;
      }

      this._notificationEventHandlers.set(type, listener);
    });

    _defineProperty(this, "removeEventListener", type => {
      if (!isAndroid) return;

      const listener = this._notificationEventHandlers.get(type);

      if (!listener) {
        return;
      }

      listener.remove();

      this._notificationEventHandlers.delete(type);
    });

    _defineProperty(this, "declineCall", (uuid, payload) => {
      this.hideNotification();
      const data = {
        callUUID: uuid,
        endAction: CallAction.ACTION_REJECTED_CALL,
        payload
      };

      _reactNative.DeviceEventEmitter.emit(RNNotificationEvent.RNNotificationEndCallAction, data);
    });

    _defineProperty(this, "answerCall", (uuid, payload) => {
      this.hideNotification();
      const data = {
        callUUID: uuid,
        payload
      };

      _reactNative.DeviceEventEmitter.emit(RNNotificationEvent.RNNotificationAnswerAction, data);
    });

    this._notificationEventHandlers = new Map();
  }

}

var _default = new RNNotificationCall();

exports.default = _default;
//# sourceMappingURL=index.js.map